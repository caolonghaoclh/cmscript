# the scripts in this file belong to the open function

macro(bm_boundary)
	if(NOT ("" STREQUAL "${ARGV0}"))
		if(NOT DEFINED MSG_PRE)
			if(NOT DEFINED PROJECT_NAME)
				set(MSG_PRE "[INFO][head][${ARGV0}]")
			else()
				set(MSG_PRE "[INFO][${PROJECT_NAME}][${ARGV0}]")
			endif()
		endif()
		message("${MSG_PRE} ------------------------------------------>")
	else()
		message("${MSG_PRE} ------------------------------------------<\n")
		unset(MSG_PRE)
	endif()
endmacro()

macro(bm_extract_version PRO_NAME)
	bm_boundary("bm_extract_version")
	
	# define _INCLUDE_DIR_REL
	if(NOT DEFINED ${PRO_NAME}_INCLUDE_DIR_REL)
		set(${PRO_NAME}_INCLUDE_DIR_REL "include/${PRO_NAME}")
	endif()
	# define _INCLUDE_DIR
	set(${PRO_NAME}_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/${${PRO_NAME}_INCLUDE_DIR_REL}")
	if(NOT DEFINED UP_PROJECT_NAME)
		string(TOUPPER ${PRO_NAME} UP_PROJECT_NAME)
	endif()
	# define _VERSION_FILE
    set(${PRO_NAME}_VERSION_FILE "${${PRO_NAME}_INCLUDE_DIR}/version.h")
	
	message("${MSG_PRE} version file is ${${PRO_NAME}_VERSION_FILE}")
	message("${MSG_PRE} include dir is ${${PRO_NAME}_INCLUDE_DIR}")
	message("${MSG_PRE} relative include dir is ${${PRO_NAME}_INCLUDE_DIR_REL}")
	
    if(NOT EXISTS ${${PRO_NAME}_VERSION_FILE})
        message(FATAL_ERROR "version file not exist")
	else()
		file(READ ${${PRO_NAME}_VERSION_FILE} VERSION_CONTENTS)
		string(REGEX MATCH "${UP_PROJECT_NAME}_VER_MAJOR ([0-9]+)" _ "${VERSION_CONTENTS}")
		if(NOT CMAKE_MATCH_COUNT EQUAL 1)
			message(FATAL_ERROR "Could not extract major version number")
		endif()
		set(VER_MAJOR ${CMAKE_MATCH_1})

		string(REGEX MATCH "${UP_PROJECT_NAME}_VER_MINOR ([0-9]+)" _ "${VERSION_CONTENTS}")
		if(NOT CMAKE_MATCH_COUNT EQUAL 1)
			message(FATAL_ERROR "Could not extract minor version number")
		endif()

		set(VER_MINOR ${CMAKE_MATCH_1})
		string(REGEX MATCH "${UP_PROJECT_NAME}_VER_PATCH ([0-9]+)" _ "${VERSION_CONTENTS}")
		if(NOT CMAKE_MATCH_COUNT EQUAL 1)
			message(FATAL_ERROR "Could not extract patch version number")
		endif()
		set(VER_PATCH ${CMAKE_MATCH_1})
		
		set(${UP_PROJECT_NAME}_VERSION_MAJOR ${VER_MAJOR})
		set(${UP_PROJECT_NAME}_VERSION_MINOR ${VER_MINOR})
		set(${UP_PROJECT_NAME}_VERSION_PATCH ${VER_PATCH})
		set(${UP_PROJECT_NAME}_VERSION "${VER_MAJOR}.${VER_MINOR}.${VER_PATCH}")
    endif()
    
	unset(VER_MAJOR)
	unset(VER_MINOR)
	unset(VER_PATCH)
	bm_boundary()
endmacro()

# get parent dir of the arg dir
# dir - dir path
# res - parent dir path
macro(bm_parent_dir dir res)
    string(REGEX REPLACE "(.*)/(.*)" "\\1" ${res}  ${dir})
endmacro()

# define bool varibale according to string value
# str_val - string value
# var_name - variable name
# null_res - default bool value
function(bmf_string2_bool str_val var_name null_res)
    string(TOUPPER "${str_val}" str_up)
    if(("TRUE" STREQUAL "${str_up}" OR "ON" STREQUAL "${str_up}"))
		set(${var_name} ON PARENT_SCOPE)
	elseif("" STREQUAL "${str_up}")
		set(${var_name} ${null_res} PARENT_SCOPE)
	else()
		set(${var_name} OFF PARENT_SCOPE)
	endif()
endfunction()

function(bmf_dir_exist dir res_name)
  set(${res_name} OFF PARENT_SCOPE)
  if(IS_DIRECTORY "${dir}")
    if(EXISTS "${dir}")
      set(${res_name} ON PARENT_SCOPE)
    endif()
  endif()
endfunction()

macro(bm_remove_repeat)
    list(REMOVE_DUPLICATES ${ARGN})
endmacro()

# https://c.runoob.com/front-end/854/
# /^lib{0,1}${lib_flag}[A-Za-z]*([0-9]*)_{0,1}[A-Za-z]*\.(lib|so|a|dll){0,1}\.{0,1}([0-9\.]*)$/g
macro(bm_lib_version_replace LIB_NAME LIB_FLAG RES_NAME VER_MAJOR VER_MINOR VER_PATCH)
	
	set(TMP_IDX "")
	set(TMP_VER "")
	set(TMP_NAME "")
	set(TMP_LEN "")
	set(TMP_SPT_STRS "")
	
	set(TMP_LIB_NAME "")
	set(TMP_LIB_SUFS ".lib." ".so." ".a." ".dll.")
	
	foreach(TMP_SUF ${TMP_LIB_SUFS})
		string(FIND ${LIB_NAME} ${TMP_SUF} TMP_IDX)
		if(NOT ("${TMP_IDX}" STREQUAL "-1"))
			string(REPLACE ${TMP_SUF} ";" TMP_SPT_STRS ${LIB_NAME})
			list(GET TMP_SPT_STRS 0 TMP_NAME)
			list(GET TMP_SPT_STRS 1 TMP_VER)
			set(TMP_SPT_STRS "")
			string(REPLACE "." ";" TMP_SPT_STRS ${TMP_VER})
			list(LENGTH TMP_SPT_STRS TMP_LEN)
			
			if("${TMP_LEN}" STREQUAL "3")
				set(TMP_LIB_NAME "${TMP_NAME}${TMP_SUF}${VER_MAJOR}.${VER_MINOR}.${VER_PATCH}")
			elseif("${TMP_LEN}" STREQUAL "2")
				set(TMP_LIB_NAME "${TMP_NAME}${TMP_SUF}${VER_MAJOR}.${VER_MINOR}")
			elseif("${TMP_LEN}" STREQUAL "1")
				set(TMP_LIB_NAME "${TMP_NAME}${TMP_SUF}${VER_MAJOR}")
			else()
				set(TMP_LIB_NAME ${LIB_NAME})
			endif()
		endif()
	endforeach()
	
	set(TMP_IDX "")
	set(TMP_VER "")
	set(TMP_NAME "")
	set(TMP_LEN "")
	set(TMP_SPT_STRS "")
	
	string(FIND ${LIB_NAME} "lib${LIB_FLAG}" TMP_IDX)
	if("${TMP_IDX}" STREQUAL "-1")
		string(REGEX REPLACE "^${LIB_FLAG}[A-Za-z]*([0-9]*).*" "\\1" TMP_VER ${LIB_NAME})
	else()
		string(REGEX REPLACE "^lib${LIB_FLAG}[A-Za-z]*([0-9]*).*" "\\1" TMP_VER ${LIB_NAME})
	endif()
	
	if("${TMP_LIB_NAME}" STREQUAL "")
		set(TMP_LIB_NAME "${LIB_NAME}")
	endif()
	
	if(NOT ("${TMP_VER}" STREQUAL ""))
		string(LENGTH ${TMP_VER} TMP_LEN)
		if("${TMP_LEN}" STREQUAL "3")
			string(REPLACE ${TMP_VER} "${VER_MAJOR}${VER_MINOR}${VER_PATCH}" TMP_LIB_NAME ${TMP_LIB_NAME})
		elseif("${TMP_LEN}" STREQUAL "2")
			string(REPLACE ${TMP_VER} "${VER_MAJOR}${VER_MINOR}" TMP_LIB_NAME ${TMP_LIB_NAME})
		elseif("${TMP_LEN}" STREQUAL "1")
			string(REPLACE ${TMP_VER} "${VER_MAJOR}" TMP_LIB_NAME ${TMP_LIB_NAME})
		else()
		endif()
	endif()
	
	set(${RES_NAME} "${TMP_LIB_NAME}")
	
	unset(TMP_IDX)
	unset(TMP_VER)
	unset(TMP_NAME)
	unset(TMP_LEN)
	unset(TMP_SPT_STRS)
	unset(TMP_LIB_NAME)
	unset(TMP_LIB_SUFS)
endmacro()

macro(bm_check_compiler_flag FLAGS_SUPPORT_C FLAGS_SUPPORT_CXX)
	# do not set TMP_SUPPORT_C AND TMP_SUPPORT_CXX
	foreach(flag ${ARGN})
		CHECK_C_COMPILER_FLAG("${flag}" TMP_SUPPORT_C)
		CHECK_CXX_COMPILER_FLAG("${flag}" TMP_SUPPORT_CXX)
		if(TMP_SUPPORT_C)
			list(APPEND ${FLAGS_SUPPORT_C} ${flag})
		endif()
		if(TMP_SUPPORT_CXX)
			list(APPEND ${FLAGS_SUPPORT_CXX} ${flag})
		endif()
	endforeach()
	unset(TMP_SUPPORT_C)
	unset(TMP_SUPPORT_CXX)
endmacro()

# ARGV0 - force ("ON"/"OFF")
function(bmf_set_env_dir)
	bm_boundary("bmf_set_env_dir")
	message("${MSG_PRE} force(${ARGV0})")
	if((NOT DEFINED ARGV0) OR ARGV0)
		# default force set dir
		set(ENV{${PROJECT_NAME}_DIR} "${CMAKE_INSTALL_PREFIX}/lib/cmake"  PARENT_SCOPE)
	else()
		if(NOT DEFINED ENV{${PROJECT_NAME}_DIR})
			set(ENV{${PROJECT_NAME}_DIR} "${CMAKE_INSTALL_PREFIX}/lib/cmake"  PARENT_SCOPE)
		endif()
	endif()
	bm_boundary()
endfunction()

macro(bm_unset_standard)
	if("" STREQUAL "${ARGV0}")
		unset(CMAKE_CXX_STANDARD)
		set(CMAKE_CXX_STANDARD_REQUIRED OFF)
	else()
		unset(CMAKE_C_STANDARD)
		set(CMAKE_C_STANDARD_REQUIRED OFF)
	endif()
endmacro()

macro(bm_use_sanitizer)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
endmacro()

macro(bmf_replace_flags)
	bm_boundary("bmf_replace_flags")
    message("${MSG_PRE} arg num(${ARGC}) new flag(${ARGV0}) old flag(${ARGV1})")
    
	if("" STREQUAL "${ARGV0}")
        message(WARNING "${MSG_PRE} please set the new flag")
	elseif("" STREQUAL "${ARGV1}")
        message(WARNING "${MSG_PRE} please set the old flag")
	else()
		SET(CCXX_FLAGS
			CMAKE_C_FLAGS 
			CMAKE_C_FLAGS_DEBUG 
			CMAKE_C_FLAGS_RELEASE
			CMAKE_C_FLAGS_MINSIZEREL 
			CMAKE_C_FLAGS_RELWITHDEBINFO
			CMAKE_CXX_FLAGS 
			CMAKE_CXX_FLAGS_DEBUG 
			CMAKE_CXX_FLAGS_RELEASE
			CMAKE_CXX_FLAGS_MINSIZEREL 
			CMAKE_CXX_FLAGS_RELWITHDEBINFO)
		
		foreach(flag ${CCXX_FLAGS})
			if(${flag} MATCHES "${ARGV1}")
				string(REGEX REPLACE "${ARGV1}" "${ARGV0}" ${flag} "${${flag}}")
			endif()
		endforeach()
		unset(CCXX_FLAGS)
    endif()
    bm_boundary()
endmacro()

macro(bm_judge_cxx_compiler)
    bm_boundary("bm_judge_cxx_compiler")
    message("${MSG_PRE} CMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
    message("${MSG_PRE} CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
    message("${MSG_PRE} CMAKE_C_COMPILER_ID=${CMAKE_C_COMPILER_ID}")
    message("${MSG_PRE} CMAKE_C_COMPILER_VERSION=${CMAKE_C_COMPILER_VERSION}")
    message("${MSG_PRE} CMAKE_CXX_COMPILER_ID=${CMAKE_CXX_COMPILER_ID}")
    message("${MSG_PRE} CMAKE_CXX_COMPILER_VERSION=${CMAKE_CXX_COMPILER_VERSION}")
    if(MSVC)
        set(BM_COMPILER_IS_MSVC ON)
    else()
        if(UP_CXX_COMPILER_ID STREQUAL "CLANG" OR UP_CXX_COMPILER_ID MATCHES "CLANG")
            set(BM_COMPILER_IS_CLANG ON)
        elseif(UP_CXX_COMPILER_ID STREQUAL "INTEL" OR UP_CXX_COMPILER_ID MATCHES "INTEL")
            set(BM_COMPILER_IS_INTEL ON)
        elseif(UP_CXX_COMPILER_ID STREQUAL "GNU" OR UP_CXX_COMPILER_ID MATCHES "GNU")
            set(BM_COMPILER_IS_GNU ON)
        endif()
    endif()

    if(CMAKE_COMPILER_IS_GNUCXX)
        set(BM_COMPILER_IS_GNU ON)
    endif()
    bm_boundary()
endmacro()

macro(bm_check_cxx20)
    bm_boundary("bm_check_cxx20")
    if(BM_COMPILER_IS_MSVC)
        set(BM_FLAG_CXX20 "/std:c++latest")
        CHECK_CXX_COMPILER_FLAG(${BM_FLAG_CXX20} BM_SUPPORT_CXX20)
    else()
        set(BM_FLAG_CXX20 "-std=c++2a")
        CHECK_CXX_COMPILER_FLAG(${BM_FLAG_CXX20} BM_SUPPORT_CXX20)
        if(NOT BM_SUPPORT_CXX20)
            set(BM_FLAG_CXX20 "-std=c++20")
            CHECK_CXX_COMPILER_FLAG(${BM_FLAG_CXX20} BM_SUPPORT_CXX20)
        endif()
        if(BM_COMPILER_IS_GNU AND BM_SUPPORT_CXX20)
            set(BM_FLAG_CXX20 "-std=gnu++2a")
        endif()
    endif()
    if(NOT BM_SUPPORT_CXX20)
        message(WARNING "${MSG_PRE} the compiler not support c++20")
        unset(BM_FLAG_CXX20)
    else()
        message("${MSG_PRE} the compiler support c++20, the flag is ${BM_FLAG_CXX20}")
    endif()
    bm_boundary()
endmacro()

macro(bm_get_compiler_version)
	if(BM_COMPILER_IS_GNU)
		execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpfullversion -dumpversion OUTPUT_VARIABLE BM_GCC_VERSION)
        message("[INFO] BM_GCC_VERSION ${BM_GCC_VERSION}")
		if(NOT ("" STREQUAL "${BM_GCC_VERSION}"))
			string(REGEX MATCHALL "[0-9]+" TMP_VERSION_COMPONENTS ${BM_GCC_VERSION})
			list(GET TMP_VERSION_COMPONENTS 0 BM_GCC_VERSION_MAJOR)
			list(GET TMP_VERSION_COMPONENTS 1 BM_GCC_VERSION_MINOR)
			list(GET TMP_VERSION_COMPONENTS 2 BM_GCC_VERSION_PATCH)
			unset(TMP_VERSION_COMPONENTS)
		endif()
	endif()
endmacro()


macro(bm_check_coroutine)
    bm_boundary("bm_check_coroutine")
    set(BM_SUPPORT_COROUTINE OFF)
    if(BM_COMPILER_IS_MSVC)
        set(BM_FLAG_COROUTINES "/await")
        CHECK_CXX_COMPILER_FLAG("${BM_FLAG_COROUTINES}" BM_SUPPORT_COROUTINES)
    elseif(BM_COMPILER_IS_GNU)
        # gcc/g++ version must large than 9
		if(BM_GCC_VERSION AND BM_GCC_VERSION VERSION_GREATER_EQUAL "10.1.0")
			set(BM_FLAG_COROUTINES "-fcoroutines")
			CHECK_CXX_COMPILER_FLAG("${BM_FLAG_COROUTINES}" BM_SUPPORT_COROUTINES)
		else()
			set(BM_SUPPORT_COROUTINES OFF)
		endif()
    elseif(BM_COMPILER_IS_CLANG)
        set(BM_FLAG_COROUTINES "-fcoroutines-ts")
        CHECK_CXX_COMPILER_FLAG("${BM_FLAG_COROUTINES}" BM_SUPPORT_COROUTINES)
    else()
        message(WARNING "${MSG_PRE} unknow compiler")
    endif()
    bm_boundary()
endmacro()

macro(bm_check_cxx)
	if(BM_COMPILER_IS_MSVC)
		CHECK_CXX_COMPILER_FLAG("/std:c++17" BM_SUPPORT_CXX17)
		CHECK_CXX_COMPILER_FLAG("/std:c++14" BM_SUPPORT_CXX14)
		CHECK_CXX_COMPILER_FLAG("/std:c++11" BM_SUPPORT_CXX11)
		CHECK_CXX_COMPILER_FLAG("/std:c++0x" BM_SUPPORT_CXX0X)
	else()
		CHECK_CXX_COMPILER_FLAG("-std=c++17" BM_SUPPORT_CXX17)
		CHECK_CXX_COMPILER_FLAG("-std=c++14" BM_SUPPORT_CXX14)
		CHECK_CXX_COMPILER_FLAG("-std=c++11" BM_SUPPORT_CXX11)
		CHECK_CXX_COMPILER_FLAG("-std=c++0x" BM_SUPPORT_CXX0X)
	endif()
endmacro()