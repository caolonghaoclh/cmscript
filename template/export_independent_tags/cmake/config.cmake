# this file will be used on building stage, also can be used to find the current library

macro(template_config_global)
    if(MSVC)
        # msvc global config
        add_definitions(-DNOMINMAX)
        add_definitions(-DUNICODE -D_UNICODE)
        add_definitions(/W3 /wd4996 /wd4995 /wd4355)
        add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)
    endif()
endmacro()

macro(template_config_dependencies TAG)
    foreach(comp ${ARGN})
        list(APPEND template_${TAG}_INCLUDE_DIRS ${template_${comp}_INCLUDE_DIRS})
        list(APPEND template_${TAG}_LIBRARY_DIRS ${template_${comp}_LIBRARY_DIRS})
        list(APPEND template_${TAG}_LIBRARIES ${template_${comp}_LIBRARIES})
        list(APPEND template_${TAG}_COMPONENTS ${comp} ${template_${comp}_COMPONENTS})
    endforeach()
    list(REMOVE_DUPLICATES template_${TAG}_INCLUDE_DIRS)
    list(REMOVE_DUPLICATES template_${TAG}_LIBRARY_DIRS)
    list(REMOVE_DUPLICATES template_${TAG}_LIBRARIES)
    list(REMOVE_DUPLICATES template_${TAG}_COMPONENTS)
endmacro()

macro(template_config_common)
    if(NOT template_common_FOUND)
        set(template_common_FOUND ON)

        if(MSVC)
            set(Eigen3_DIR $ENV{Eigen3_DIR})
        endif()
        add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
		add_definitions(-D_SILENCE_CXX17_NEGATORS_DEPRECATION_WARNING)
        find_package(Eigen3)
        list(APPEND template_common_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIRS})

        if(template_USE_SPDLOG)
            if(MSVC)
                set(spdlog_DIR $ENV{spdlog_DIR})
            endif()
            find_package(spdlog REQUIRED)
            list(APPEND template_common_LIBRARIES spdlog::spdlog)
        endif()

        if(template_USE_PERFTOOLS)
            find_package(Gperftools REQUIRED)
            if(GPERFTOOLS_FOUND)
	            list(APPEND template_common_LIBRARIES ${GPERFTOOLS_LIBRARIES})
	            list(APPEND template_common_INCLUDE_DIRS ${GPERFTOOLS_INCLUDE_DIRS})
            else()
                message(FATAL_ERROR "has not found Gperftools")
            endif()
        endif()
    endif()
endmacro()

macro(template_config_core)
    if(NOT template_core_FOUND)
        set(template_core_FOUND ON)
        set(template_core_DEPENDENCIES "common")
        template_config_target(${template_core_DEPENDENCIES})
        template_config_dependencies(core ${template_core_DEPENDENCIES})
    endif()
endmacro()

macro(template_config_app)
    if(NOT template_app_FOUND)
        set(template_app_FOUND ON)
        set(template_app_DEPENDENCIES "core" "las")
        template_config_target(${template_app_DEPENDENCIES})
        template_config_dependencies(app ${template_app_DEPENDENCIES})
    endif()
endmacro()

macro(template_config_fbx)
    if(NOT template_fbx_FOUND)
        set(template_fbx_FOUND ON)
        find_package(fbxsdk)
        list(APPEND template_fbx_INCLUDE_DIRS ${fbxsdk_INCLUDE_DIRS})
        list(APPEND template_fbx_LIBRARY_DIRS ${fbxsdk_LIBRARY_DIRS})
        list(APPEND template_fbx_LIBRARIES ${fbxsdk_LIBRARIES})
        template_config_common()
        template_config_dependencies(fbx common)
        message("template_fbx_LIBRARIES ${template_fbx_LIBRARIES}")
    endif()
endmacro()

macro(template_config_las)
    if(NOT template_las_FOUND)
        set(template_las_FOUND ON)
        find_package(LASTools)
        list(APPEND template_las_INCLUDE_DIRS ${LASTools_INCLUDE_DIRS})
        list(APPEND template_las_LIBRARY_DIRS ${LASTools_LIBRARY_DIRS})
        list(APPEND template_las_LIBRARIES ${LASTools_LIBRARIES})
        set(template_las_DEPENDENCIES "common")
        template_config_target(${template_las_DEPENDENCIES})
        template_config_dependencies(las ${template_las_DEPENDENCIES})
    endif()
endmacro()

macro(template_config_vxl)
    if(NOT template_vxl_FOUND)
        set(template_vxl_FOUND ON)
        set(template_vxl_DEPENDENCIES "common")
        template_config_target(${template_vxl_DEPENDENCIES})
        template_config_dependencies(vxl ${template_vxl_DEPENDENCIES})
    endif()
endmacro()

macro(template_config_target)
    foreach(TAG_NAME ${ARGN})
        if("common" STREQUAL "${TAG_NAME}")
            template_config_common()
        elseif("core" STREQUAL "${TAG_NAME}")
            template_config_core()
        elseif("app" STREQUAL "${TAG_NAME}")
            template_config_app()
        elseif("fbx" STREQUAL "${TAG_NAME}")
            template_config_fbx()
        elseif("las" STREQUAL "${TAG_NAME}")
            template_config_las()
        elseif("vxl" STREQUAL "${TAG_NAME}")
            template_config_vxl()
        else()
        endif()
        list(APPEND template_INCLUDE_DIRS ${template_${TAG_NAME}_INCLUDE_DIRS})
        list(APPEND template_LIBRARY_DIRS ${template_${TAG_NAME}_LIBRARY_DIRS})
        list(APPEND template_LIBRARIES ${template_${TAG_NAME}_LIBRARIES})

        get_property(template_EXPORT_TAGS_STR_TMP GLOBAL PROPERTY "template_EXPORT_TAGS_STR")
        set_property(GLOBAL PROPERTY template_EXPORT_TAGS_STR ${template_EXPORT_TAGS_STR_TMP} ${TAG_NAME} ${template_${TAG_NAME}_COMPONENTS})
        
    endforeach()
    #list(REMOVE_DUPLICATES template_EXPORT_TAGS)
    list(REMOVE_DUPLICATES template_INCLUDE_DIRS)
    list(REMOVE_DUPLICATES template_LIBRARY_DIRS)
    list(REMOVE_DUPLICATES template_LIBRARIES)
endmacro()

macro(template_export_target)
    foreach(TAG ${template_EXPORT_TAGS})
        list(APPEND template_TARGETS template::${TAG})
    endforeach()
    list(REMOVE_DUPLICATES template_TARGETS)
endmacro()

macro(bmg_export_tags_define projectName)
  set_property(GLOBAL PROPERTY "${projectName}_EXPORT_TAGS_STR" "")
endmacro()

macro(bmg_export_tags_fetch projectName)
  get_property(TEMP_EXPORT_TAGS_STR GLOBAL PROPERTY "${projectName}_EXPORT_TAGS_STR")
  list(APPEND ${projectName}_EXPORT_TAGS ${TEMP_EXPORT_TAGS_STR})
  list(REMOVE_DUPLICATES ${projectName}_EXPORT_TAGS)
  unset(TEMP_EXPORT_TAGS_STR)
endmacro()
